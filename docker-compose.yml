# Docker Compose for Modular YAML Manifest System
# Complete development and production environment setup

version: '3.8'

services:
  # Main application server
  manifest-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: modular-yaml-server
    ports:
      - "${PORT:-3009}:${PORT:-3009}"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3009}
      - MANIFEST_DIR=/app/manifests
      - OUTPUT_DIR=/app/output
      - EXAMPLES_DIR=/app/examples
      - DOCKER_ENABLED=true
      - DOCKER_REGISTRY=${DOCKER_REGISTRY:-docker.io}
      - TLS_ENABLED=${TLS_ENABLED:-false}
      - CUSTOM_DOMAIN=${CUSTOM_DOMAIN:-localhost}
    volumes:
      - ./manifests:/app/manifests:ro
      - ./output:/app/output
      - ./examples:/app/examples:ro
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker rendering
      - ./certs:/app/certs:ro  # TLS certificates
    restart: unless-stopped
    networks:
      - manifest-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-3009}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python renderer service for Python-based module rendering
  python-renderer:
    image: python:3.11-alpine
    container_name: python-renderer
    working_dir: /app
    command: sh -c "pip install -r requirements.txt && python renderer.py"
    volumes:
      - ./examples/python:/app
      - ./manifests:/app/manifests:ro
      - ./output:/app/output
    environment:
      - MANIFEST_SERVER_URL=http://manifest-server:${PORT:-3009}
    networks:
      - manifest-network
    depends_on:
      - manifest-server

  # PHP renderer service for PHP-based module rendering
  php-renderer:
    image: php:8.2-cli-alpine
    container_name: php-renderer
    working_dir: /app
    command: sh -c "php -S 0.0.0.0:8080 renderer.php"
    ports:
      - "8080:8080"
    volumes:
      - ./examples/php:/app
      - ./manifests:/app/manifests:ro
      - ./output:/app/output
    environment:
      - MANIFEST_SERVER_URL=http://manifest-server:${PORT:-3009}
    networks:
      - manifest-network
    depends_on:
      - manifest-server

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: manifest-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - manifest-network
    restart: unless-stopped

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: manifest-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./static:/usr/share/nginx/html:ro
    networks:
      - manifest-network
    depends_on:
      - manifest-server
    restart: unless-stopped
    profiles:
      - production

  # MongoDB for manifest storage (optional)
  mongodb:
    image: mongo:6
    container_name: manifest-mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS:-password}
    volumes:
      - mongodb-data:/data/db
      - ./scripts/mongodb-init.js:/docker-entrypoint-initdb.d/init.js:ro
    networks:
      - manifest-network
    restart: unless-stopped
    profiles:
      - database

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: manifest-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - manifest-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: manifest-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - manifest-network
    restart: unless-stopped
    profiles:
      - monitoring
    depends_on:
      - prometheus

networks:
  manifest-network:
    driver: bridge
    name: modular-yaml-network

volumes:
  redis-data:
    driver: local
  mongodb-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml content for development
services:
  manifest-server:
    build:
      target: builder
    environment:
      - NODE_ENV=development
      - DEBUG_MODE=true
      - AUTO_RELOAD=true
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
